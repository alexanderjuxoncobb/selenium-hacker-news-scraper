{
  "permissions": {
    "allow": [
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(mkdir:*)",
      "Bash(python:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(sqlite3:*)",
      "Bash(# Backup and recreate database\nmv /Users/zebcobb/repos/selenium-hacker-news-scraper/dashboard/hn_scraper.db /Users/zebcobb/repos/selenium-hacker-news-scraper/dashboard/hn_scraper.db.backup\n\npython -c \"\nfrom database import DatabaseManager\nimport json\nfrom datetime import datetime\n\n# Create fresh database\nprint('ðŸ”„ Creating fresh database...')\ndb = DatabaseManager()\n\n# Create test user\nuser_id = db.create_user('hardware.test@example.com', 'Hardware Test User')\nprint(f'âœ… Created user: {user_id}')\n\n# Add hardware interests only\ndb.update_user_interest_weight(user_id, 'hardware', 1.0, 'high')\ndb.update_user_interest_weight(user_id, 'robotics', 0.8, 'high')\nprint('âœ… Added hardware and robotics interests')\n\n# Create test stories\nimport sqlite3\ntest_stories = [\n    ('2025-01-18', 1, 'New AMD Ryzen Processors with Advanced Architecture', 'https://example.com/amd', 150, 'tech_user', 45, 'https://news.ycombinator.com/item?id=123', 'AMD releases new processors.', True, 0.8, datetime.now().isoformat(), False, json.dumps(['hardware'])),\n    ('2025-01-18', 2, 'React 18 Concurrent Features Tutorial', 'https://example.com/react', 89, 'dev_user', 23, 'https://news.ycombinator.com/item?id=124', 'Learn React 18 features.', True, 0.7, datetime.now().isoformat(), False, json.dumps(['programming', 'web'])),\n    ('2025-01-18', 3, 'Boston Dynamics Robot Performs Complex Tasks', 'https://example.com/robot', 234, 'robot_fan', 67, 'https://news.ycombinator.com/item?id=125', 'Robot demonstrates new capabilities.', True, 0.9, datetime.now().isoformat(), False, json.dumps(['hardware', 'robotics']))\n]\n\nwith sqlite3.connect(db.db_path) as conn:\n    cursor = conn.cursor()\n    for story in test_stories:\n        cursor.execute('''\n            INSERT INTO stories \n            (date, rank, title, url, points, author, comments_count, \n             hn_discussion_url, article_summary, is_relevant, relevance_score, \n             scraped_at, was_cached, tags)\n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        ''', story)\n    conn.commit()\n\nprint(f'âœ… Added {len(test_stories)} test stories')\n\n# Test filtering\nrelevant_stories = db.get_user_relevant_stories_by_date(user_id, '2025-01-18')\nprint(f'ðŸŽ¯ User should see {len(relevant_stories)} relevant stories:')\nfor story in relevant_stories:\n    print(f'  - {story.title} (tags: {story.tags})')\n\nprint(f'\\\\nðŸ†” Test user ID: {user_id}')\nprint(f'ðŸ”— Test URL: http://localhost:8000/dashboard/{user_id}')\n\")",
      "Bash(curl:*)",
      "Bash(pip3 install:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "WebFetch(domain:community.openai.com)",
      "WebFetch(domain:docs.railway.com)",
      "WebFetch(domain:github.com)",
      "Bash(rg:*)"
    ],
    "deny": []
  }
}